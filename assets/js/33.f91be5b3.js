(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{345:function(t,s,n){"use strict";n.r(s);var a=n(7),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://leetcode.cn/problems/merge-two-sorted-lists/"),s("OutboundLink")],1),t._v(" "),s("strong",[t._v("需要注意的点")])]),t._v(" "),s("ol",[s("li",[t._v("需要返回虚拟头节点.next")]),t._v(" "),s("li",[t._v("进行迭代的是另一个指针， 需要进行不断后移")]),t._v(" "),s("li",[t._v("判断的重要性")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Definition for singly-linked list.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# class ListNode:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     def __init__(self, val=0, next=None):")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         self.val = val")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         self.next = next")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Optional"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ListNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Optional"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ListNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Optional"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ListNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 虚拟头节点，返回该节点.next")]),t._v("\n        prehead "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ListNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进行迭代的真实指针")]),t._v("\n        prev "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prehead\n        p1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1\n        p2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" p1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" p2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" p2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p2\n                p2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p1\n                p1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n            \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此时的prev 的指针并不是更新后的位置，需要往后移")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# prev = prev.next")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 可以简单理解成1. prev = prehead, 2. prev.next = p1 or p2 3.prev = prev.next")]),t._v("\n            prev "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个判断很重要")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果p1 or p2 为空，返回p1 or p2")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果进行过循环后，p1 or p2 为空, prev.next = p1 or p2")]),t._v("\n        prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" p1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" p2\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回prehead.next")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" prehead"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);