(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{341:function(t,s,n){"use strict";n.r(s);var a=n(7),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://leetcode.cn/problems/linked-list-cycle-ii/"),s("OutboundLink")],1),t._v(" "),s("strong",[t._v("需要注意的点")]),t._v("\n1.  环头节点(环头)，链表的头节点(链头)，fast 跟slow 相遇的节点(相遇点)\n走n圈，环头到链头为a,slow 到相遇点为b， fast 在环里面走c，\n环的长度是b+c\nfast走过的距离是\nfast = a + n(b+c)+b = a + (n+1)b+nc\nslow走过的距离是\nslow = a+b\n等式\na + (n+1)b+nc = 2(a+b)\n== a = c + (n-1)(b+c)")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Definition for singly-linked list.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# class ListNode:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     def __init__(self, x):")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         self.val = x")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         self.next = None")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("detectCycle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ListNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ListNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n        环头节点(环头)，链表的头节点(链头)，fast 跟slow 相遇的节点(相遇点)\n        走n圈，环头到链头为a,slow 到相遇点为b， fast 在环里面走c，\n        环的长度是b+c\n        fast走过的距离是\n        fast = a + n(b+c)+b = a + (n+1)b+nc\n        slow走过的距离是\n        slow = a+b\n        等式\n        a + (n+1)b+nc = 2(a+b)\n        == a = c + (n-1)(b+c)\n        '''")]),t._v("\n        slow "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n        fast "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" fast "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" fast"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n            fast "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fast"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n            slow "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" fast "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" slow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n                a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fast\n                b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n                    b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n                \n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);